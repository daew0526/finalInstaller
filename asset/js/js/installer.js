/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/client/js/installer.js":
/*!************************************!*\
  !*** ./src/client/js/installer.js ***!
  \************************************/
/***/ (() => {

eval("class Shape {\n  constructor(sx, sy, ex, ey) {\n    this.sx = sx;\n    this.sy = sy;\n    this.ex = ex;\n    this.ey = ey;\n  }\n\n}\n\nclass Square extends Shape {\n  constructor() {\n    super(sx, sy, ex, ey);\n    this.name = `square ${square.length + 1}`;\n  }\n\n}\n\nclass Circle extends Shape {\n  constructor() {\n    super(sx, sy, ex, ey);\n    this.name = `circle ${circle.length + 1}`;\n  }\n\n}\n\nlet sx, sy, ex, ey;\nlet square = [];\nlet circle = [];\nlet paints = [];\nlet moving = -1;\nlet sq, cr;\nlet squarePating = false;\nlet circlePating = false;\nlet squareKey = \"square\";\nlet circleKey = \"circle\";\nconst interiorContaier = document.querySelector(\".container\");\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst squareBtn = document.querySelector(\".js-square\");\nconst circleBtn = document.querySelector(\".js-circle\");\nconst range = document.querySelector(\".js-range\");\nconst restoreBtn = document.querySelector(\".js-restore\");\nconst saveBtn = document.querySelector(\".save_btn\");\nconst saveForm = document.querySelector(\".save__container\");\nconst main = document.querySelector(\"main\");\nlet imageUrl;\nlet id;\n\nconst removeContainer = () => {\n  saveForm.classList.remove(\"active\");\n  main.classList.remove(\"active\");\n};\n\nconst redirectHome = () => {\n  const home = document.querySelector(\".home\");\n  home.click();\n};\n\nconst handleSubmit = async () => {\n  const input = document.querySelector(\".save__container input\");\n  const value = input.value;\n  const imgObj = {\n    imageUrl,\n    value\n  };\n  const response = await fetch(`/api/interior/${id}/save`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(imgObj)\n  });\n\n  if (response.status === 201) {\n    removeContainer();\n    redirectHome();\n  }\n\n  if (response.status === 404) {\n    // errorMessage();\n    return;\n  }\n};\n\nconst paintContainer = () => {\n  saveForm.classList.add(\"active\");\n  main.classList.add(\"active\");\n};\n\nconst handleSaveBtnClick = () => {\n  id = interiorContaier.dataset.userId;\n  imageUrl = canvas.toDataURL(\"image/png\");\n  paintContainer();\n  const titleBtn = document.querySelector(\".save__container button\");\n  titleBtn.addEventListener(\"click\", handleSubmit);\n};\n\nconst handleRestoreBtnClick = () => {\n  const check = paints.pop();\n  const base = check.name.substring(0, 6);\n\n  if (base === \"square\") {\n    square.pop();\n    savePaint();\n  }\n\n  if (base === \"circle\") {\n    circle.pop();\n    savePaint();\n  }\n\n  drawPating();\n};\n\nconst savePaint = () => {\n  localStorage.setItem(squareKey, JSON.stringify(square));\n  localStorage.setItem(circleKey, JSON.stringify(circle));\n};\n\nconst handleSquareBtnClick = () => {\n  if (sq === true) {\n    sq = false;\n    squareBtn.innerText = \"사각형\";\n  } else {\n    sq = true;\n    cr = false;\n    squareBtn.innerText = \"사각형 사용중\";\n  }\n};\n\nconst getSquareTarget = (x, y) => {\n  for (let i = 0; i < square.length; i++) {\n    let s = square[i];\n\n    if (x > s.sx && x < s.ex && y > s.sy && y < s.ey) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst drawPating = () => {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  for (let i = 0; i < square.length; i++) {\n    let rect = square[i];\n    ctx.strokeRect(rect.sx, rect.sy, rect.ex - rect.sx, rect.ey - rect.sy);\n  }\n};\n\nconst handleMousedown = e => {\n  const {\n    offsetX,\n    offsetY\n  } = e;\n  sx = offsetX;\n  sy = offsetY;\n\n  if (sq) {\n    moving = getSquareTarget(sx, sy);\n\n    if (moving === -1) {\n      squarePating = true;\n    }\n  }\n};\n\nconst handleMouseMove = e => {\n  const {\n    offsetX,\n    offsetY\n  } = e;\n  ex = offsetX;\n  ey = offsetY;\n\n  if (squarePating) {\n    drawPating();\n    ctx.strokeRect(sx, sy, ex - sx, ey - sy);\n  } else {\n    if (moving != -1) {\n      const rect = square[moving];\n      const gapX = ex - sx;\n      const gapY = ey - sy;\n      rect.sx += gapX;\n      rect.sy += gapY;\n      rect.ex += gapX;\n      rect.ey += gapY;\n      sx = ex;\n      sy = ey;\n      savePaint();\n      drawPating();\n    }\n  } //   if (circlePating) {\n  //     drawPating();\n  //     ctx.beginPath();\n  //   }\n\n};\n\nconst handleMouseUp = () => {\n  if (squarePating) {\n    let x1 = Math.min(sx, ex);\n    let y1 = Math.min(sy, ey);\n    let x2 = Math.max(sx, ex);\n    let y2 = Math.max(sy, ey);\n    const newRect = new Square(x1, y1, x2, y2);\n    square.push(newRect);\n    paints.push(newRect);\n    savePaint();\n  }\n\n  squarePating = false;\n  moving = -1;\n};\n\nconst loadPaint = () => {\n  const squareData = localStorage.getItem(squareKey);\n\n  if (squareData !== null) {\n    const squareObj = JSON.parse(squareData);\n    square = squareObj;\n    paints = squareObj;\n    drawPating();\n  }\n};\n\nfunction init() {\n  const CANVAS_SIZE = 1000;\n  ctx.fillStyle = \"orange\";\n\n  if (canvas) {\n    canvas.width = CANVAS_SIZE;\n    canvas.height = CANVAS_SIZE;\n    canvas.addEventListener(\"mousedown\", handleMousedown);\n    canvas.addEventListener(\"mousemove\", handleMouseMove);\n    canvas.addEventListener(\"mouseup\", handleMouseUp);\n  }\n\n  if (squareBtn) {\n    squareBtn.addEventListener(\"click\", handleSquareBtnClick);\n  }\n\n  if (restoreBtn) {\n    restoreBtn.addEventListener(\"click\", handleRestoreBtnClick);\n  }\n\n  if (saveBtn) {\n    saveBtn.addEventListener(\"click\", handleSaveBtnClick);\n  }\n\n  loadPaint();\n}\n\ninit();\n\n//# sourceURL=webpack://installer/./src/client/js/installer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/client/js/installer.js"]();
/******/ 	
/******/ })()
;